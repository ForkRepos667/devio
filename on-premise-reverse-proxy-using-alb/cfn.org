* Diagram
  [[./diagram.png]]
   
* DONE CFn: Top
  CLOSED: [2019-11-10 Sun 16:10]
  - prefix :: devio-alb-iptg
** Parameters
   #+NAME:top-param-prefix
   #+BEGIN_SRC yaml
Description: Enter a prefix of this system.
Type: String
Default: devio-alb-iptg
   #+END_SRC

* DONE CFn: Network
  CLOSED: [2019-11-13 Wed 10:46]
  file:./00-network.yaml
  - vpc1, subnet1, igw1 :: 10.0.0.0/24, /27
  - vpc2, subnet2-[a|c] :: 10.0.200.0/24, /27
  - vpcpeering :: vpc1 <--> vpc2
  - route-table-[1|2] :: 
  - cgw, vgw, vpn-connection :: 
  #+BEGIN_SRC yaml :noweb yes :tangle 00-network.yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: VPC Network
Parameters:
  Prefix:
    <<top-param-prefix>>
  CgwPublicIP:
    <<param-cgw-ip>>
  LocalCIDR:
    <<param-local-cidr>>

Resources:
  # VPC
  VPC1:
    <<vpc(name="!Sub ${Prefix}-vpc1", cidr="10.0.0.0/24")>>
  VPC2:
    <<vpc(name="!Sub ${Prefix}-vpc2", cidr="10.0.200.0/24")>>

  # IGW
  IGW1:
    <<igw(name="!Sub ${Prefix}-igw1")>>
  IGW1Attach:
    <<igw-attach(igwid="!Ref IGW1", vpcid="!Ref VPC1")>>

  # VPCPeering
  VPCPeering:
    <<vpcpeering>>

  # Subnet
  Subnet1:
    <<subnet(vpcid="!Ref VPC1", az="ap-northeast-1a", cidr="10.0.0.0/27", name="!Sub ${Prefix}-subnet1")>>
  Subnet2a:
    <<subnet(vpcid="!Ref VPC2", az="ap-northeast-1a", cidr="10.0.200.0/27",   name="!Sub ${Prefix}-subnet2-a")>>
  Subnet2c:
    <<subnet(vpcid="!Ref VPC2", az="ap-northeast-1c", cidr="10.0.200.32/27",   name="!Sub ${Prefix}-subnet2-c")>>

  # Routing
  <<routing1>>
  <<routing2>>

  # VPN
  <<vpn>>

Outputs:
  <<outputs-network>>
  #+END_SRC

** DONE Parameters
   CLOSED: [2019-11-14 Thu 15:39]
   #+NAME:param-local-cidr
   #+BEGIN_SRC yaml
Description: Enter CIDR of local network
Type: String
Default: 192.168.10.0/24
   #+END_SRC
   
   #+NAME:param-cgw-ip
   #+BEGIN_SRC yaml
Description: Enter CustomerGateway Public IP
Type: String
Default: 0.0.0.0
   #+END_SRC
** DONE Resources
   CLOSED: [2019-11-13 Wed 10:46]
*** vpn
    #+NAME:vpn
    #+BEGIN_SRC yaml
CGW:
  Type: AWS::EC2::CustomerGateway
  Properties:
    Type: ipsec.1
    BgpAsn: 65000
    IpAddress: !Ref CgwPublicIP
    Tags:
      - Key: Name
        Value: !Sub ${Prefix}-cgw

VGW:
  Type: AWS::EC2::VPNGateway
  Properties:
    Type: ipsec.1
    Tags:
      - Key: Name
        Value: !Sub ${Prefix}-vgw

AttachVGW:
  Type: AWS::EC2::VPCGatewayAttachment
  Properties:
    VpcId: !Ref VPC2
    VpnGatewayId: !Ref VGW

VPNConnection:
  Type: AWS::EC2::VPNConnection
  Properties:
    CustomerGatewayId: !Ref CGW
    StaticRoutesOnly: true
    Type: ipsec.1
    VpnGatewayId: !Ref VGW
    Tags:
      - Key: Name
        Value: !Sub ${Prefix}-vpn-connection

VPNConnectionRoute:
  Type: AWS::EC2::VPNConnectionRoute
  Properties:
    DestinationCidrBlock: !Ref LocalCIDR
    VpnConnectionId: !Ref VPNConnection
    #+END_SRC
*** routing1
    #+NAME:routing1
    #+BEGIN_SRC yaml
RouteTable1:
  Type: AWS::EC2::RouteTable
  Properties:
    VpcId: !Ref VPC1
    Tags:
      - Key: Name
        Value: !Sub ${Prefix}-route-table-1
RouteTable1Association:
  Type: AWS::EC2::SubnetRouteTableAssociation
  Properties:
    RouteTableId: !Ref RouteTable1
    SubnetId: !Ref Subnet1
Route1x:
  Type: AWS::EC2::Route
  Properties:
    RouteTableId: !Ref RouteTable1
    DestinationCidrBlock: 0.0.0.0/0
    GatewayId: !Ref IGW1
Route1y:
  Type: AWS::EC2::Route
  Properties:
    RouteTableId: !Ref RouteTable1
    DestinationCidrBlock: 10.0.200.0/24
    VpcPeeringConnectionId: !Ref VPCPeering
    #+END_SRC
*** routing2
    #+NAME:routing2
    #+BEGIN_SRC yaml
RouteTable2:
  Type: AWS::EC2::RouteTable
  Properties:
    VpcId: !Ref VPC2
    Tags:
      - Key: Name
        Value: !Sub ${Prefix}-route-table-2
RouteTable2AssociationA:
  Type: AWS::EC2::SubnetRouteTableAssociation
  Properties:
    RouteTableId: !Ref RouteTable2
    SubnetId: !Ref Subnet2a
RouteTable2AssociationC:
  Type: AWS::EC2::SubnetRouteTableAssociation
  Properties:
    RouteTableId: !Ref RouteTable2
    SubnetId: !Ref Subnet2c
Route2x:
  Type: AWS::EC2::Route
  DependsOn: AttachVGW
  Properties:
    RouteTableId: !Ref RouteTable2
    DestinationCidrBlock: !Ref LocalCIDR
    GatewayId: !Ref VGW
Route2y:
  Type: AWS::EC2::Route
  Properties:
    RouteTableId: !Ref RouteTable2
    DestinationCidrBlock: 10.0.0.0/24
    VpcPeeringConnectionId: !Ref VPCPeering
    #+END_SRC
*** vpcpeering
    #+NAME:vpcpeering
    #+BEGIN_SRC yaml
Type: AWS::EC2::VPCPeeringConnection
Properties: 
  VpcId: !Ref VPC1
  PeerVpcId: !Ref VPC2
  Tags:
    - Key: Name
      Value: !Sub ${Prefix}-vpcpeering
    #+END_SRC
** DONE Outputs
   CLOSED: [2019-11-13 Wed 10:44]
   #+NAME:outputs-network
   #+BEGIN_SRC yaml
VPC1:
  Value: !Ref VPC1
  Export:
    Name: !Sub ${Prefix}-vpc1
VPC2:
  Value: !Ref VPC2
  Export:
    Name: !Sub ${Prefix}-vpc2
IGW1:
  Value: !Ref IGW1
  Export:
    Name: !Sub ${Prefix}-igw1
VPCPeering:
  Value: !Ref VPCPeering
  Export:
    Name: !Sub ${Prefix}-vpcpeering
Subnet1:
  Value: !Ref Subnet1
  Export:
    Name: !Sub ${Prefix}-subnet1
Subnet2a:
  Value: !Ref Subnet2a
  Export:
    Name: !Sub ${Prefix}-subnet2-a
Subnet2c:
  Value: !Ref Subnet2c
  Export:
    Name: !Sub ${Prefix}-subnet2-c
RouteTable1:
  Value: !Ref RouteTable1
  Export:
    Name: !Sub ${Prefix}-route-table-1
RouteTable2:
  Value: !Ref RouteTable2
  Export:
    Name: !Sub ${Prefix}-route-table-2
CGW:
  Value: !Ref CGW
  Export:
    Name: !Sub ${Prefix}-cgw
VGW:
  Value: !Ref VGW
  Export:
    Name: !Sub ${Prefix}-vgw
VPNConnection:
  Value: !Ref VPNConnection
  Export:
    Name: !Sub ${Prefix}-vpn-connection
   #+END_SRC

* DONE CFn: SecurityGroup
  CLOSED: [2019-11-14 Thu 16:29]
  file:./01-sg.yaml
  - [app|alb|service]-sg ::
  #+BEGIN_SRC yaml :noweb yes :tangle 01-sg.yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: Security Groups
Parameters:
  Prefix:
    <<top-param-prefix>>
  GlobalIP:
    <<param-globalip>>

Resources:
  SgApp:
    <<sg-app>>
  SgAlb:
    <<sg-alb>>

Outputs:
  <<outputs-sg>>
  #+END_SRC

** DONE Resources
   CLOSED: [2019-11-13 Wed 11:00]
*** DONE sg-app
    CLOSED: [2019-11-13 Wed 10:51]
    #+NAME:sg-app
    #+BEGIN_SRC yaml
Type: AWS::EC2::SecurityGroup
Properties: 
  GroupDescription: SG for App Server
  GroupName: !Sub ${Prefix}-sg-app
  VpcId:
    Fn::ImportValue: !Sub ${Prefix}-vpc1
  SecurityGroupIngress:
    - IpProtocol: tcp
      FromPort: 3389
      ToPort: 3389
      CidrIp: !Sub ${GlobalIP}/32
  Tags: 
    - Key: Name
      Value: !Sub ${Prefix}-sg-app
    #+END_SRC
*** DONE sg-alb
    CLOSED: [2019-11-13 Wed 10:53]
    #+NAME:sg-alb
    #+BEGIN_SRC yaml
Type: AWS::EC2::SecurityGroup
Properties: 
  GroupDescription: SG for ALB
  GroupName: !Sub ${Prefix}-sg-alb
  VpcId:
    Fn::ImportValue: !Sub ${Prefix}-vpc2
  SecurityGroupIngress:
    - IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref SgApp
  Tags: 
    - Key: Name
      Value: !Sub ${Prefix}-sg-alb
    #+END_SRC
** DONE Parameters
   CLOSED: [2019-11-13 Wed 11:00]
   â–¼GlobalIP
   #+NAME:param-globalip
   #+BEGIN_SRC yaml
Description: Enter a globalIP of your environment
Type: String
Default: 0.0.0.0
   #+END_SRC
** DONE Outputs
   CLOSED: [2019-11-13 Wed 10:50]
   #+NAME:outputs-sg
   #+BEGIN_SRC yaml
SgApp:
  Value: !Ref SgApp
  Export:
    Name: !Sub ${Prefix}-sg-app
SgAlb:
  Value: !Ref SgAlb
  Export:
    Name: !Sub ${Prefix}-sg-alb
   #+END_SRC
* DONE CFn: EC2 (App)
  CLOSED: [2019-11-14 Thu 16:28]
  file:./02-ec2-app.yaml
  - ec2-app ::
  #+BEGIN_SRC yaml :noweb yes :tangle 02-ec2-app.yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instance (app)
Parameters:
  Prefix:
    <<top-param-prefix>>
  Ec2ImageId:
    <<param-ec2imageid-app>>
  Ec2InstanceType:
    <<param-ec2instancetype-app>>
  Ec2KeyName:
    <<param-ec2keyname-app>>
 
Resources:
  AppInstance:
    <<app-instance>>

Outputs:
  <<outputs-ec2-app>>
  #+END_SRC

** Parameters
   #+NAME:param-ec2imageid-app
   #+BEGIN_SRC yaml
Type: AWS::SSM::Parameter::Value<String>
Default: /aws/service/ami-windows-latest/Windows_Server-2019-Japanese-Full-Base
   #+END_SRC

   #+NAME:param-ec2instancetype-app
   #+BEGIN_SRC yaml    
Type: String
Default: t3.micro
   #+END_SRC

   #+NAME:param-ec2keyname-app
   #+BEGIN_SRC yaml
Type: AWS::EC2::KeyPair::KeyName
Description: Name of an existing EC2 KeyPair to enable access to instances.
   #+END_SRC

** Resources
*** AppInstance
    #+NAME:app-instance
    #+BEGIN_SRC yaml :noweb yes
Type: AWS::EC2::Instance
Properties:
  ImageId: !Ref Ec2ImageId
  InstanceType: !Ref Ec2InstanceType
  KeyName: !Ref Ec2KeyName  
  SubnetId:
    Fn::ImportValue: !Sub ${Prefix}-subnet1
  SecurityGroupIds:
    - Fn::ImportValue: !Sub ${Prefix}-sg-app
      
  Tags:
    - Key: Name
      Value: !Sub ${Prefix}-ec2-app
    #+END_SRC

** Outputs
    #+NAME:outputs-ec2-app
    #+BEGIN_SRC yaml
AppInstance:
  Value: !Ref AppInstance
  Export:
    Name: !Sub ${Prefix}-ec2-app
PublicIp:
  Description: AppServer Public IP
  Value: !GetAtt AppInstance.PublicIp
    #+END_SRC

* DONE CFn: ALB
  CLOSED: [2019-11-14 Thu 16:32]
  file:./03-alb.yaml
  - alb ::
  - alb-tg :: 
  #+BEGIN_SRC yaml :noweb yes :tangle 03-alb.yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: ALB
Parameters:
  Prefix:
    <<top-param-prefix>>
  TargetIP:
    <<param-target-ip>>

Resources:
  ALB:
    <<alb>>
  ALBTargetGroup:
    <<alb-tg>>
  ALBListener:
    <<alb-listener>>

Outputs:
  <<outputs-alb>>
  #+END_SRC

** Parameters
   #+NAME:param-target-ip
   #+BEGIN_SRC yaml
Type: String
Description: IP address of the target
   #+END_SRC
** Resources
*** DONE ALB
    CLOSED: [2019-11-13 Wed 11:25]
    - [[https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html][doc: AWS::ElasticLoadBalancingV2::LoadBalancer]]
    #+NAME:alb
    #+BEGIN_SRC yaml 
Type: AWS::ElasticLoadBalancingV2::LoadBalancer
Properties: 
  Type: application
  Scheme: internal
  IpAddressType: ipv4
  Subnets: 
    - Fn::ImportValue: !Sub ${Prefix}-subnet2-a
    - Fn::ImportValue: !Sub ${Prefix}-subnet2-c
  SecurityGroups:
    - Fn::ImportValue: !Sub ${Prefix}-sg-alb
  Name: !Sub ${Prefix}-alb
  # LoadBalancerAttributes:
  #   - Key:
  #     Value: 
  # SubnetMappings: --> not requied in Internal ALB
  Tags:
    - Key: Name
      Value: !Sub ${Prefix}-alb
    #+END_SRC

*** DONE ALBTargetGroup
    CLOSED: [2019-11-13 Wed 11:37]
    - [[https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html][doc: AWS::ElasticLoadBalancingV2::TargetGroup]]
    #+NAME:alb-tg
    #+BEGIN_SRC yaml
Type: AWS::ElasticLoadBalancingV2::TargetGroup
Properties: 
  Name: !Sub ${Prefix}-alb-tg
  TargetType: ip
  Protocol: HTTP
  Port: 80
  VpcId:
    Fn::ImportValue: !Sub ${Prefix}-vpc2
  Tags:
    - Key: Name
      Value: !Sub ${Prefix}-alb-tg
  Targets:
    - AvailabilityZone: all
      Id: !Ref TargetIP
      Port: 80
  # 
  # HealthCheckEnabled: Boolean
  # HealthCheckIntervalSeconds: Integer
  # HealthCheckPath: String
  # HealthCheckPort: String
  # HealthCheckProtocol: String
  # HealthCheckTimeoutSeconds: Integer
  # HealthyThresholdCount: Integer
  # Matcher: Matcher
  # TargetGroupAttributes: 
  #   - Key: proxy_protocol_v2.enabled
  #     Value: false
  #   - Key: deregistration_delay.timeout_seconds
  #     Value: 300
  # UnhealthyThresholdCount: Integer
    #+END_SRC

*** DONE ALBListener
    CLOSED: [2019-11-13 Wed 11:42]
    - [[https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html][doc: AWS::ElasticLoadBalancingV2::Listener]]
    #+NAME:alb-listener
    #+BEGIN_SRC yaml
Type: AWS::ElasticLoadBalancingV2::Listener
Properties: 
  DefaultActions: 
    - Type: forward
      TargetGroupArn: !Ref ALBTargetGroup
  LoadBalancerArn: !Ref ALB
  Port: 80
  Protocol: HTTP
  # SslPolicy: String
  # Certificates: - Certificate
    #+END_SRC
** Outputs
   #+NAME:outputs-alb
   #+BEGIN_SRC yaml
ALBDNSName:
  Value: !GetAtt ALB.DNSName
  Export:
    Name: !Sub ${Prefix}-alb-dns-name
ALB:
  Value: !Ref ALB
  Export:
    Name: !Sub ${Prefix}-alb
ALBTargetGroup:
  Value: !Ref ALBTargetGroup
  Export:
    Name: !Sub ${Prefix}-alb-tg
   #+END_SRC
* CiscoISR sample config
  file:./sample-config-cisco-isr.txt
* Scripts
** igw
   #+NAME:igw
   #+BEGIN_SRC python :results output silent :var name=""
print('''\
Type: AWS::EC2::InternetGateway
Properties:
  Tags:
  - Key: Name
    Value: %s\
''' % (name), end='')
   #+END_SRC
** igw-attach
   #+NAME:igw-attach
   #+BEGIN_SRC python :results output silent :var igwid="" vpcid=""
print('''\
Type: AWS::EC2::VPCGatewayAttachment
Properties: 
  InternetGatewayId: %s
  VpcId: %s\
''' % (igwid, vpcid), end='')
   #+END_SRC
** vpc
   #+NAME:vpc
   #+BEGIN_SRC python :results output silent :var cidr="10.0.0.0/16" name=""
print('''\
Type: AWS::EC2::VPC
Properties:
  CidrBlock: %s
  EnableDnsSupport: true
  EnableDnsHostnames: true
  Tags:
    - Key: Name
      Value: %s\
''' % (cidr, name), end='')
   #+END_SRC

** subnet
   #+NAME:subnet
   #+BEGIN_SRC python :results output silent :var vpcid="" az="" cidr="" name=""
print('''\
Type: AWS::EC2::Subnet
Properties:
  VpcId: %s
  AvailabilityZone: %s
  CidrBlock: %s
  MapPublicIpOnLaunch: True
  Tags:
    - Key: Name
      Value: %s
\
''' % (vpcid, az, cidr, name), end='')
   #+END_SRC

